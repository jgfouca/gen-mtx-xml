#! /usr/bin/env python3

"""
Run KK spiluk, parse result and compare against scipy
"""

import scipy
import numpy as np
import scipy.linalg as la  # SciPy Linear Algebra Library
from scipy.sparse import bsr_matrix, csr_matrix

import argparse, sys, math
from pathlib import Path
from utils import expect, run_cmd
from copy import deepcopy

L_luc_str = \
"""
L luc
1 0 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0 0
0 0 1 0 0 0 0 0 0
0.5 0 -0.0125 1 0 0 0 0 0
0.4 0 -0.01 0 1 0 0 0 0
0 0.27272727 0 0 0 1 0 0 0
0 0 0.5833333 0 0 0 1 0 0
0 0 0 0.46153846 0.32417582 0.01441758 0 1 0
0 0 0 0.15384615 0.16758242 0.00575824 0 0 1
"""

U_luc_str = \
"""
U luc
10 0 0.3 0 0 0.6 0 0 0
0 11 0 0 0 0 0.7 0 0
0 0 12 0 0 0 0 0 0
0 0 0 13 1 -0.3 0 0 0
0 0 0 0 14 -0.24 0 0 0
0 0 0 0 0 15 0 0 0
0 0 0 0 0 0 16 0 0
0 0 0 0 0 0 0 17 0
0 0 0 0 0 0 0 0 18
"""

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0}
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m#  \033[0m
    > {0}
""".format(Path(args[0]).name),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument("-t", "--threads", type=int, default=1, help="The number of threads")

    parser.add_argument("-l", "--luc", action="store_true", help="Use Luc hardcoded results to compare")

    parser.add_argument("--ulu", action="store_true", help="Use unblocked LU")

    parser.add_argument("--blu", action="store_true", help="Use blocked LU")

    parser.add_argument("--ablu", action="store_true", help="Analytic block LU")

    parser.add_argument("--uilu", action="store_true", help="Use unblocked ILU")

    parser.add_argument("--bilu", action="store_true", help="Use blocked ILU")

    parser.add_argument("-f", "--fill-level", type=int, default=2, help="Fill level for ILU")

    args = parser.parse_args(args[1:])

    return args

###############################################################################
def pprint(mtx, indent=""):
###############################################################################
    for row in mtx:
        print(indent, end="")
        for item in row:
            print("{:.5f}".format(item), end=" ")

        print()

###############################################################################
def pprint_blocked(mtx, block_size):
###############################################################################
    for row in mtx:
        for col in row:
            pprint(col)

        print()

###############################################################################
def parse_matrix(output, look_for):
###############################################################################
    raw_array = []
    active = False
    for line in output.splitlines():
        if look_for in line:
            expect(not active, "bad active")
            active = True
        elif active:
            if line[0].isdigit():
                raw_array.append([float(item) for item in line.split()])
            else:
                break

    return np.array(raw_array)

###############################################################################
def parse_output(output):
###############################################################################
    A = parse_matrix(output, "A input")
    L = parse_matrix(output, "L result")
    U = parse_matrix(output, "U result")

    block_size = None
    for line in output.splitlines():
        if "block_size=" in line:
            token = line.split()[4]
            expect(token.startswith("block_size="), f"Unexpected block_size line '{line}'")
            block_size = int(token.split("=")[-1].strip())

    expect(block_size is not None, "No block_size found in output")

    return A, L, U, block_size

###############################################################################
def compare_array(expected, actual, name):
###############################################################################
    print(f"  Checking {name}")
    expect(len(expected) == len(actual), "Incompatible arrays")

    result = True

    for row1, row2 in zip(expected, actual):
        for item1, item2 in zip(row1, row2):
            if not math.isclose(item1, item2, abs_tol=1e-5):
                print("    {:.5f} != {:.5f}".format(item1, item2))
                result = False

    if not result:
        print("    Expected:")
        pprint(expected, indent="      ")
        print("    Actual:")
        pprint(actual, indent="      ")

    return result

###############################################################################
def compare_arrays(expected_L, expected_U, L, U, name):
###############################################################################
    print(f"Comparing against {name}")

    result = True
    result &= compare_array(expected_L, L, "L")
    result &= compare_array(expected_U, U, "U")

    return result

###############################################################################
def create_numpy_2d_mtx(block_size):
###############################################################################
    return np.array(np.mat(";".join([" ".join(str(0)*block_size)] * block_size)), dtype=float)

###############################################################################
def blockize(A, block_size):
###############################################################################
    block = create_numpy_2d_mtx(block_size)
    blocks_per_dim = len(A) // block_size
    A_block = [ [deepcopy(block) for _ in range(blocks_per_dim)]
                for _ in range(blocks_per_dim) ]

    for row_idx, row in enumerate(A):
        row_blk_idx = row_idx // block_size
        row_offset  = row_idx % block_size
        for col_idx, val in enumerate(row):
            col_blk_idx = col_idx // block_size
            col_offset  = col_idx % block_size
            A_block[row_blk_idx][col_blk_idx][row_offset][col_offset] = val

    return A_block

###############################################################################
def unblock(mtx, block_size):
###############################################################################
    """
    >>> L_luc = parse_matrix(L_luc_str, "L luc")
    >>> U_luc = parse_matrix(U_luc_str, "U luc")
    >>> bL_luc = blockize(L_luc, 3)
    >>> bU_luc = blockize(U_luc, 3)
    >>> L_luc2 = unblock(bL_luc, 3)
    >>> U_luc2 = unblock(bU_luc, 3)
    >>> np.array_equal(L_luc, L_luc2)
    True
    >>> np.array_equal(U_luc, U_luc2)
    True
    """
    dim_len = len(mtx) * block_size
    result = create_numpy_2d_mtx(dim_len)

    for brow_idx, brow in enumerate(mtx):
        for bcol_idx, block in enumerate(brow):
            for row_idx, row in enumerate(block):
                for col_idx, val in enumerate(row):
                    result[brow_idx * block_size + row_idx][bcol_idx * block_size + col_idx] = val

    return result

###############################################################################
def analytic_block_lu(A_unblocked, block_size):
###############################################################################
    # Create 3 x 3 matrix of dense matrices
    dim = len(A_unblocked)
    assert(dim % block_size == 0);
    block = create_numpy_2d_mtx(block_size)
    blocks_per_dim = dim // block_size
    assert(blocks_per_dim == 3);
    A = blockize(A_unblocked, block_size)
    L = [ [deepcopy(block) for _ in range(blocks_per_dim)]
          for _ in range(blocks_per_dim) ]
    U = [ [deepcopy(block) for _ in range(blocks_per_dim)]
          for _ in range(blocks_per_dim) ]

    # Handle easy stuff, 1st row, 1st col, L diag
    for i in range(blocks_per_dim):
        U[0][i] = A[0][i]
        L[i][i] = np.identity(block_size)
        if i > 0:
            L[i][0] = A[i][0] @ (la.inv(A[0][0]))

    # Handle next row of U
    A00_inv = la.inv(A[0][0])
    for i in range(1, blocks_per_dim):
        U[1][i] = A[1][i] - (L[1][0] @ U[0][i])

    # Handle last L (L_21)
    L[2][1] = (A[2][1] - (L[2][0] @ U[0][1])) @ la.inv(U[1][1])

    # Handle last U (U_22)
    U[2][2] = A[2][2] - (L[2][0] @ U[0][2]) - (L[2][1] @ U[1][2])

    return unblock(L, block_size), unblock(U, block_size)

###############################################################################
def run_scipy_and_compare(A, L, U, block_size, luc, ulu, blu, ablu, uilu, bilu, fill_level):
###############################################################################
    result = True

    # create A's for sparse operations
    A_csr = csr_matrix(A)
    A_bsr = bsr_matrix(A, blocksize=(block_size, block_size))

    if luc:
        L_luc = parse_matrix(L_luc_str, "L luc")
        U_luc = parse_matrix(U_luc_str, "U luc")

        result &= compare_arrays(L_luc, U_luc, L, U, "luc")

    if ulu:
        _, L_lu_unblocked, U_lu_unblocked = la.lu(A)

        result &= compare_arrays(L_lu_unblocked, U_lu_unblocked, L, U, "lu_unblocked")

    if blu:
        slu_bsr = scipy.sparse.linalg.splu(A_bsr)
        L_lu_blocked, U_lu_blocked = slu_bsr.L.toarray(), slu_bsr.U.toarray()

        result &= compare_arrays(L_lu_blocked, U_lu_blocked, L, U, "lu_blocked")

    if ablu:
        L_ablu_blocked, U_ablu_blocked = analytic_block_lu(A, block_size)

        result &= compare_arrays(L_ablu_blocked, U_ablu_blocked, L, U, "ablu_blocked")

    if uilu:
        silu_csr = scipy.sparse.linalg.spilu(A_csr, fill_factor=fill_level)
        L_ilu_unblocked, U_ilu_unblocked = silu_csr.L.toarray(), silu_csr.U.toarray()

        result &= compare_arrays(L_ilu_unblocked, U_ilu_unblocked, L, U, "ilu_unblocked")

    if bilu:
        silu_bsr = scipy.sparse.linalg.spilu(A_bsr, fill_factor=fill_level)
        L_ilu_blocked, U_ilu_blocked = silu_bsr.L.toarray(), silu_bsr.U.toarray()

        result &= compare_arrays(L_ilu_blocked, U_ilu_blocked, L, U, "ilu_blocked")

    return result

###############################################################################
def spiluk(threads, luc, ulu, blu, ablu, uilu, bilu, fill_level):
###############################################################################
    cmd = f"OMP_NUM_THREADS={threads} ./KokkosKernels_sparse_openmp --gtest_filter=openmp.sparse_spiluk_double_int_size_t_TestDevice"
    print(f"RUNNING: {cmd}")
    output = run_cmd(cmd)[1]

    A, L, U, block_size = parse_output(output)

    return run_scipy_and_compare(A, L, U, block_size, luc, ulu, blu, ablu, uilu, bilu, fill_level)

###############################################################################
def _main_func(description):
###############################################################################
    success = spiluk(**vars(parse_command_line(sys.argv, description)))

    sys.exit(0 if success else 1)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
