#! /usr/bin/env python3

"""
Run a complete set of soak tests
"""

import argparse, sys
from pathlib import Path
from utils import run_cmd, expect

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} [-n N] [-l N]
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Run a full soak test with 100 iterations each with level 0 \033[0m
    > {0} -n 100 -l 0
""".format(Path(args[0]).name),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument("-l", "--level", type=int, default=0, help="The number of levels in the preconditioner")

    parser.add_argument("-n", "--num", type=int, default=100, help="Number of runs per soak test")

    args = parser.parse_args(args[1:])

    return args

###############################################################################
def full_test(level, num):
###############################################################################
    densities = (10, 20, 50, 100)
    Ns = (4, 6, 8, 9)

    for N in Ns:
        for density in densities:
            for block_size in range(1, N+1):
                if N % block_size == 0:
                    cmd = f"gen-mtx-xml -s {num} {N}x{density} -b {block_size} -l {level}"
                    stat, out, err = run_cmd(cmd, verbose=True)
                    expect(stat == 0, f"{cmd} failed:\n{out}\n\n{err}")

    return True

###############################################################################
def _main_func(description):
###############################################################################
    success = full_test(**vars(parse_command_line(sys.argv, description)))

    sys.exit(0 if success else 1)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
